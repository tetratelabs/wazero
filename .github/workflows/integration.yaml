name: Standard Library Integration Tests
on:
  pull_request:
    branches: [main]
    paths-ignore:  # ignore docs as they are built with Netlify.
      - '**/*.md'
      - 'site/**'
      - 'netlify.toml'
  push:
    branches: [main]
    paths-ignore:  # ignore docs as they are built with Netlify.
      - '**/*.md'
      - 'site/**'
      - 'netlify.toml'

defaults:
  run:  # use bash for all operating systems unless overridden
    shell: bash

env:  # Update this prior to requiring a higher minor version in go.mod
  GO_VERSION: "1.19"  # 1.xx == latest patch of 1.xx
  ZIG_VERSION: "0.11.0-dev.1499+23b7d2889"
  TINYGO_VERSION: "0.27.0"

concurrency:
  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-concurrency-to-cancel-any-in-progress-job-or-run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.actor }}
  cancel-in-progress: true

jobs:
  # This builds a zig test binary only if the same version tag hasn't been build before.
  # This saves time as we rarely update the zig version.
  build_zig_test_binary:
    name: Build Zig test binary
    runs-on: ubuntu-20.04
    env:
      ZIG_INSTALL: ~/zig-install
      ZIG_SOURCE: ~/zig-source

    steps:
      - name: Check if binary already exists
        id: check-exist
        env:
          GH_TOKEN: ${{ github.token }}
        run: | # https://docs.github.com/en/rest/actions/artifacts?apiVersion=2022-11-28#list-artifacts-for-a-repository
          EXIST=$(
            (curl -s -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/tetratelabs/wazero/actions/artifacts | \
              jq -e '.artifacts[] | select(.name == "zig-test-binary-${{ env.ZIG_VERSION }}")' &>/dev/null \
            ) || echo false)
          echo "exist=${EXIST}" >> $GITHUB_OUTPUT

      - name: Install Zig build
        if: steps.check-exist.outputs.exist == 'false'
        run: |
          mkdir -p ${{ env.ZIG_INSTALL }}
          curl -sSL https://ziglang.org/builds/zig-linux-x86_64-${{ env.ZIG_VERSION }}.tar.xz | tar -xJ --strip-components=1 -C ${{ env.ZIG_INSTALL }}

      - name: Download Zig source code
        if: steps.check-exist.outputs.exist == 'false'
        run: |
          mkdir -p ${{ env.ZIG_SOURCE }}
          curl -sSL https://ziglang.org/builds/zig-${{ env.ZIG_VERSION }}.tar.xz | tar -xJ --strip-components=1 -C ${{ env.ZIG_SOURCE }}

      - name: Build Stdlib test binary
        if: steps.check-exist.outputs.exist == 'false'
        # --test-no-exec allows building of the test Wasm binary without executing command.
        # --enable-cache persists the binary output to the cache directory and prints the absolute path to the binary.
        run: |
          cd ${{ env.ZIG_SOURCE }}
          _ZIG_TEST_BINARY_PATH=$(${{ env.ZIG_INSTALL }}/zig test --test-no-exec --enable-cache -target wasm32-wasi --zig-lib-dir ./lib ./lib/std/std.zig)/test.wasm
          cp ${_ZIG_TEST_BINARY_PATH} ~/test.wasm

      - name: Checkout wazero
        if: steps.check-exist.outputs.exist == 'false'
        uses: actions/checkout@v3

      - name: Upload zig-test-binary
        if: steps.check-exist.outputs.exist == 'false'
        uses: actions/upload-artifact@v3
        with:
          name: zig-test-binary-${{ env.ZIG_VERSION }}
          path: |
            ~/test.wasm

  zig:
    needs: build_zig_test_binary
    name: Zig (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # don't fail fast as sometimes failures are arch/OS specific
      matrix:
        os: [ubuntu-20.04, macos-12, windows-2022]

    steps:
      - name: Checkout wazero
        uses: actions/checkout@v3

      - name: Download the built binary
        run: gh run download --name zig-test-binary-${{ env.ZIG_VERSION }}
        env:
          # Necessary to use gh command.
          GH_TOKEN: ${{ github.token }}

      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run the test binary with wazero CLI
        run: go run ./cmd/wazero run -mount=:/ test.wasm

  build_tinygo_test_binary:
    name: Build TinyGo test binary
    runs-on: ubuntu-20.04
    env:
      BINARY_OUT: ~/out

    steps:
      - name: Check if binary already exists
        id: check-exist
        env:
          GH_TOKEN: ${{ github.token }}
        run: | # https://docs.github.com/en/rest/actions/artifacts?apiVersion=2022-11-28#list-artifacts-for-a-repository
          EXIST=$(
            (curl -s -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/tetratelabs/wazero/actions/artifacts | \
              jq -e '.artifacts[] | select(.name == "tinygo-test-binaries-${{ env.TINYGO_VERSION }}")' &>/dev/null \
            ) || echo false)
          echo "exist=${EXIST}" >> $GITHUB_OUTPUT

      - name: Install TinyGo
        if: steps.check-exist.outputs.exist == 'false'
        run: |  # installing via curl so commands are similar on OS/x
          tinygo_version=${{ env.TINYGO_VERSION }}
          curl -sSL https://github.com/tinygo-org/tinygo/releases/download/v${tinygo_version}/tinygo${tinygo_version}.linux-amd64.tar.gz | sudo tar -C /usr/local -xzf -
          echo "TINYGOROOT=/usr/local/tinygo" >> $GITHUB_ENV
          echo "/usr/local/tinygo/bin" >> $GITHUB_PATH

      - uses: actions/setup-go@v3
        if: steps.check-exist.outputs.exist == 'false'
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build Test Binaries
        if: steps.check-exist.outputs.exist == 'false'
        # The following list of packages is derived from:
        # https://github.com/tinygo-org/tinygo/blob/v0.27.0/Makefile#L277-L324
        # Note:
        #  - index/suffixarray is extremely slow, so skip it.
        #  - compress/zlib is skipped as it depends on the local files https://github.com/golang/go/blob/go1.20/src/compress/zlib/writer_test.go#L16-L30
        #  - debug/macho is skipped as it depends on the local files https://github.com/golang/go/blob/go1.20/src/debug/macho/file_test.go#L25
        run: |
          mkdir ${{ env.BINARY_OUT }}
          for value in container/heap \
            container/list \
            container/ring \
            crypto/des \
            crypto/internal/subtle \
            crypto/md5 \
            crypto/rc4 \
            crypto/sha1 \
            crypto/sha256 \
            crypto/sha512 \
            embed/internal/embedtest \
            encoding \
            encoding/ascii85 \
            encoding/base32 \
            encoding/csv \
            encoding/hex \
            go/scanner \
            hash \
            hash/adler32 \
            hash/crc64 \
            hash/fnv \
            html \
            internal/itoa \
            internal/profile \
            math \
            math/cmplx \
            net \
            net/http/internal/ascii \
            net/mail \
            os \
            path \
            reflect \
            sync \
            testing \
            testing/iotest \
            text/scanner \
            unicode \
            unicode/utf16 \
            unicode/utf8
          do
            tinygo test -target wasi -c -o ${{ env.BINARY_OUT }}/${value/\//_}.test $value
          done

      - name: Checkout wazero
        if: steps.check-exist.outputs.exist == 'false'
        uses: actions/checkout@v3

      - name: Upload tinygo-test-binary
        if: steps.check-exist.outputs.exist == 'false'
        uses: actions/upload-artifact@v3
        with:
          name: tinygo-test-binaries-${{ env.TINYGO_VERSION }}
          path: |
            ${{ env.BINARY_OUT }}/*.test

  tinygo:
    needs: build_tinygo_test_binary
    name: TinyGo (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail fast as sometimes failures are arch/OS specific
      matrix:
        os: [ubuntu-20.04, macos-12, windows-2022]

    steps:
      - name: Checkout wazero
        uses: actions/checkout@v3

      - name: Download the built binary
        run: gh run download --name tinygo-test-binaries-${{ env.TINYGO_VERSION }}
        env:
          # Necessary to use gh command.
          GH_TOKEN: ${{ github.token }}

      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install wazero
        run: go install ./cmd/wazero

      - name: Run standard library tests
        run: |
          for bin in *.test; do
            echo $bin
            wazero run -mount=:/ -mount=:/tmp $bin -- -test.v
          done

  wasi-testsuite:
    name: wasi-testsuite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-12, windows-2022]

    steps:
      # TODO: remove cargo/rust parts after https://github.com/WebAssembly/wasi-testsuite/issues/49
      - uses: actions/cache@v3
        id: cache
        with:
          path:
            ~/.cargo
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/.rustup/toolchains/
            tests/rust/target
          key: integration-test-wasi-testsuite-${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', '**/Cargo.lock', '**/Cargo.toml', '**/*.rs') }}

      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout wazero
        uses: actions/checkout@v3

      - name: Install wazero
        run: |
          go install ./cmd/wazero
        shell: bash

      - name: Checkout wasi-testsuite
        uses: actions/checkout@v3
        with:
          # TODO: after https://github.com/WebAssembly/wasi-testsuite/pull/55 is merged and synced,
          # Use the upstream repo and point to prod/testsuite-base branch (or specific commit in there).
          repository: tetratelabs/wasi-testsuite
          ref: wazero-python-adapter

      - name: Initialize Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # latest version of python 3
          cache: pip

      - name: Install dependencies
        working-directory: test-runner
        run: |
          python3 -m pip install -r requirements.txt

      # TODO: Remove after https://github.com/WebAssembly/wasi-testsuite/issues/49
      - name: Install wasm32-wasi target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-wasi

      # TODO: Remove after https://github.com/WebAssembly/wasi-testsuite/issues/49
      - name: Compile rust tests
        working-directory: tests/rust
        run: |
          ./build.sh

      - name: Run all wasi-testsuite
        run: |
          python3 test-runner/wasi_test_runner.py \
            -t ./tests/assemblyscript/testsuite/ \
            ./tests/c/testsuite/ \
            ./tests/rust/testsuite/ \
            -f ./adapters/wazero_skip.json \
            -r ./adapters/wazero.py
