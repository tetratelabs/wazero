name: Release CLI
on:
  pull_request:
    branches: [main]
    paths-ignore:  # ignore docs as they are built with Netlify.
      - '**/*.md'
      - 'site/**'
      - 'netlify.toml'
  push:
    branches: [main]
    tags: 'v[0-9]+.[0-9]+.[0-9]+**'  # Ex. v0.2.0 v0.2.1-rc2

env: # Update this prior to requiring a higher minor version in go.mod
  GO_VERSION: "1.20"  # 1.xx == latest patch of 1.xx

defaults:
  run:  # use bash for all operating systems unless overridden
    shell: bash

concurrency:
  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-concurrency-to-cancel-any-in-progress-job-or-run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.actor }}
  cancel-in-progress: true

jobs:
  pre_release:
    name: Pre-release build
    # This only runs on ubuntu so that we can simplify the installation of necessary toolchain to build artifacts.
    runs-on: ubuntu-22.04
    # This allows us to test in the following job regardless of the event (tag or not).
    outputs:
      VERSION: ${{ steps.output-version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/go/bin
          key: pre-release-check-${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum', 'Makefile') }}

      # ubuntu is missing wixl https://github.com/actions/virtual-environments/issues/3857
      # ubuntu is also missing osslsigncode (no issue, yet)
      - name: "Install GNOME msitools (wixl) and osslsigncode"
        run: sudo apt update -qq && sudo apt install -qq -y wixl osslsigncode

      - name: Download Windows code signing certificate
        env:
          WINDOWS_CODESIGN_P12_BASE64: ${{ secrets.WINDOWS_CODESIGN_P12_BASE64 }}
        run: |
          if [ $WINDOWS_CODESIGN_P12_BASE64 ]; then
            echo $WINDOWS_CODESIGN_P12_BASE64 | base64 --decode > windows-certificate.p12
            echo "WINDOWS_CODESIGN_P12=windows-certificate.p12" >> $GITHUB_ENV
          fi

      - name: Make artifacts (test)
        if: github.event_name != 'push' || !contains(github.ref, 'refs/tags/')
        env:
          WINDOWS_CODESIGN_P12_BASE64: ${{ secrets.WINDOWS_CODESIGN_P12_BASE64 }}
          WINDOWS_CODESIGN_PASSWORD: ${{ secrets.WINDOWS_CODESIGN_PASSWORD }}
        run: |
          if [ -n $WINDOWS_CODESIGN_P12_BASE64 ]; then
            unset WINDOWS_CODESIGN_PASSWORD
          fi
          VERSION=${{ github.sha }}
          make dist VERSION=$VERSION
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Make artifacts
        # Triggers only on tag creation.
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        env:
          WINDOWS_CODESIGN_P12_BASE64: ${{ secrets.WINDOWS_CODESIGN_P12_BASE64 }}
          WINDOWS_CODESIGN_PASSWORD: ${{ secrets.WINDOWS_CODESIGN_PASSWORD }}
        run: | # Note: MSI_VERSION requires . as a separator, so replace "-" in the tag with ".".
          if [ -n $WINDOWS_CODESIGN_P12_BASE64 ]; then
            unset WINDOWS_CODESIGN_PASSWORD
          fi
          VERSION=${GITHUB_REF#refs/tags/v}
          MSI_VERSION=${VERSION//-/.}
          make dist VERSION=$VERSION MSI_VERSION=$MSI_VERSION
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      # This allows us to test in the following job regardless of the event (tag or not).
      - id: output-version
        run: echo "VERSION=${VERSION}" >> "$GITHUB_OUTPUT"

      # In order to share the built artifacts in the subsequent tests, we use cache instead of actions/upload-artifacts.
      # The reason is that upload-artifacts are not globally consistent and sometimes pre_release_test won't be able to
      # find the artifacts uploaded here. See https://github.com/actions/upload-artifact/issues/21 for more context.
      # Downside of this is that, we pressure the cache capacity set per repository.
      # TODO: delete unnecessary caches (not only this one, but also the caches created in merged PRs) according to:
      # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#force-deleting-cache-entries
      - uses: actions/cache@v3
        id: cache
        with:
          # Use share the cache containing archives across OSes.
          enableCrossOsArchive: true
          # Note: this creates a cache per run.
          key: release-artifacts-${{ github.run_id }}
          path:
            dist/

  # pre_release_test tests the artifacts built by pre_release in the OS dependent way.
  pre_release_test:
    needs: pre_release
    name: Pre-release test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail fast as sometimes failures are arch/OS specific
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache
        with:
          # We need this cache to run tests.
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          key: release-artifacts-${{ github.run_id }}
          path:
            dist/

      - name: Test (linux)
         # Check if the version was correctly inserted with VERSION variable
        if: runner.os == 'Linux'
        run: |
          tar xf dist/wazero_${{ needs.pre_release.outputs.VERSION }}_linux_amd64.tar.gz
          ./wazero version | grep ${{ needs.pre_release.outputs.VERSION }}

      - name: Test (darwin)
        # Check if the version was correctly inserted with VERSION variable
        if: runner.os == 'macOS'
        run: |
          tar xf dist/wazero_${{ needs.pre_release.outputs.VERSION }}_darwin_amd64.tar.gz
          ./wazero version | grep ${{ needs.pre_release.outputs.VERSION }}

      # This only checks the installer when built on Windows as it is simpler than switching OS.
      # refreshenv is from choco, and lets you reload ENV variables (used here for PATH).
      - name: Test Windows Installer
        if: runner.os == 'Windows'
        run: |
          set MSI_FILE="dist\wazero_${{ needs.pre_release.outputs.VERSION }}_windows_amd64.msi"
          call packaging\msi\verify_msi.cmd
        shell: cmd

      # This tests the manifest via yamllint because validation via winget requires too much setup.
      # See https://github.com/microsoft/winget-cli/issues/754#issuecomment-896475895
      - name: Test winget manifest generation
        if: runner.os == 'Windows'
        run: |
          ./packaging/msi/winget_manifest.sh ${{ needs.pre_release.outputs.VERSION }} "dist\wazero_${{ needs.pre_release.outputs.VERSION }}_windows_amd64.msi" > Tetrate.wazero.yaml
          yamllint -sd '{extends: default, rules: {line-length: disable}}' Tetrate.wazero.yaml

  # Triggers only on the tag creation.
  release:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: pre_release_test
    name: Release
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          key: release-artifacts-${{ github.run_id }}
          path:
            dist/

      - name: Create draft release
        run: |
          ls dist
          tag="${GITHUB_REF#refs/tags/}"
          ./.github/workflows/release_notes.sh ${tag} > release-notes.txt
          gh release create ${tag} --draft --notes-file release-notes.txt --title ${GITHUB_REF#refs/tags/} ./dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
