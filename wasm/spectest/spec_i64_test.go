package spectest

import (
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/mathetake/gasm/wasm"
)

func Test_i64(t *testing.T) {
	/*
		;; \(assert_return\s\(invoke\s("[a-zA-Z_0-9]+")\s\(i64.const\s((\.|:|-|\+|[0-9A-Za-z_])+)\)\s\(i64.const\s((\.|-|:|\+|[0-9a-zA-Z_])+)\)\)\s\(i64.const\s((\.|-|:|\+|[0-9a-zA-Z_])+)\)\)
		->
		assertBinaryOpExpI64($1, $2, $4, $6)

		;; \(assert_return\s\(invoke\s("[a-zA-Z_0-9]+")\s\(i64.const\s((\.|:|-|\+|[0-9A-Za-z_])+)\)\)\s\(i64.const\s((\.|-|:|\+|[0-9a-zA-Z_])+)\)\)
		->
		assertUnaryOpExpI64($1, $2, $4)

		;; \(assert_trap\s\(invoke\s("[a-zA-Z_0-9]+")\s\(i64.const\s((\.|:|-|\+|[0-9A-Za-z])+)\)\s\(i64.const\s((\.|-|:|\+|[0-9a-zA-Z])+)\)\)\s"[a-z\s]+"\)
		->
		assertPanic($1, $2, $4)

		;; \(assert_return\s\(invoke\s("[a-zA-Z_0-9]+")\s\(i64.const\s((\.|:|-|\+|[0-9A-Za-z_])+)\)\s\(i64.const\s((\.|-|:|\+|[0-9a-zA-Z_])+)\)\)\s\(i32.const\s((\.|-|:|\+|[0-9a-zA-Z_])+)\)\)
		->
		assertBinaryOpExpI32($1, $2, $4, $6)

		;; \(assert_return\s\(invoke\s("[a-zA-Z_0-9]+")\s\(i64.const\s((\.|:|-|\+|[0-9A-Za-z_])+)\)\)\s\(i32.const\s((\.|-|:|\+|[0-9a-zA-Z_])+)\)\)
		->
		assertUnaryOpExpI32($1, $2, $4)

	*/

	vm := requireInitVM(t, "i64", nil)
	assertBinaryOpExpI64 := func(name string, arg1, arg2, exp uint64) {
		values, types, err := vm.ExecExportedFunction(name, arg1, arg2)
		if !(assert.NoError(t, err) &&
			assert.Len(t, values, 1) &&
			assert.Len(t, types, 1) &&
			assert.Equal(t, types[0], wasm.ValueTypeI64) && assert.Equal(t, exp, values[0])) {
			panic(name + " failed")
		}
	}
	assertBinaryOpExpI32 := func(name string, arg1, arg2 uint64, exp uint32) {
		values, types, err := vm.ExecExportedFunction(name, arg1, arg2)
		if !(assert.NoError(t, err) &&
			assert.Len(t, values, 1) &&
			assert.Len(t, types, 1) &&
			assert.Equal(t, types[0], wasm.ValueTypeI32) && assert.Equal(t, exp, uint32(values[0]))) {
			panic(name + " failed")
		}
	}
	assertUnaryOpExpI64 := func(name string, arg, exp uint64) {
		values, types, err := vm.ExecExportedFunction(name, arg)
		if !(assert.NoError(t, err) &&
			assert.Len(t, values, 1) &&
			assert.Len(t, types, 1) &&
			assert.Equal(t, types[0], wasm.ValueTypeI64) && assert.Equal(t, exp, values[0])) {
			panic(name + " failed")
		}
	}
	assertUnaryOpExpI32 := func(name string, arg uint64, exp uint32) {
		values, types, err := vm.ExecExportedFunction(name, arg)
		if !(assert.NoError(t, err) &&
			assert.Len(t, values, 1) &&
			assert.Len(t, types, 1) &&
			assert.Equal(t, types[0], wasm.ValueTypeI32) && assert.Equal(t, exp, uint32(values[0]))) {
			panic(name + " failed")
		}
	}
	assertPanic := func(name string, arg1, arg2 uint64) {
		if !assert.Panics(t, func() {
			_, _, _ = vm.ExecExportedFunction(name, arg1, arg2)
		}) {
			panic(name + " failed")
		}
	}

	assertBinaryOpExpI64("add", 1, 1, 2)
	assertBinaryOpExpI64("add", 1, 0, 1)
	assertBinaryOpExpI64("add", 0xffffffffffffffff, 0xffffffffffffffff, 0xfffffffffffffffe)
	assertBinaryOpExpI64("add", 0xffffffffffffffff, 1, 0)
	assertBinaryOpExpI64("add", 0x7fffffffffffffff, 1, 0x8000000000000000)
	assertBinaryOpExpI64("add", 0x8000000000000000, 0xffffffffffffffff, 0x7fffffffffffffff)
	assertBinaryOpExpI64("add", 0x8000000000000000, 0x8000000000000000, 0)
	assertBinaryOpExpI64("add", 0x3fffffff, 1, 0x40000000)

	assertBinaryOpExpI64("sub", 1, 1, 0)
	assertBinaryOpExpI64("sub", 1, 0, 1)
	assertBinaryOpExpI64("sub", 0xffffffffffffffff, 0xffffffffffffffff, 0)
	assertBinaryOpExpI64("sub", 0x7fffffffffffffff, 0xffffffffffffffff, 0x8000000000000000)
	assertBinaryOpExpI64("sub", 0x8000000000000000, 1, 0x7fffffffffffffff)
	assertBinaryOpExpI64("sub", 0x8000000000000000, 0x8000000000000000, 0)
	assertBinaryOpExpI64("sub", 0x3fffffff, 0xffffffffffffffff, 0x40000000)

	assertBinaryOpExpI64("mul", 1, 1, 1)
	assertBinaryOpExpI64("mul", 1, 0, 0)
	assertBinaryOpExpI64("mul", 0xffffffffffffffff, 0xffffffffffffffff, 1)
	assertBinaryOpExpI64("mul", 0x1000000000000000, 4096, 0)
	assertBinaryOpExpI64("mul", 0x8000000000000000, 0, 0)
	assertBinaryOpExpI64("mul", 0x8000000000000000, 0xffffffffffffffff, 0x8000000000000000)
	assertBinaryOpExpI64("mul", 0x7fffffffffffffff, 0xffffffffffffffff, 0x8000000000000001)
	assertBinaryOpExpI64("mul", 0x0123456789abcdef, 0xfedcba9876543210, 0x2236d88fe5618cf0)
	assertBinaryOpExpI64("mul", 0x7fffffffffffffff, 0x7fffffffffffffff, 1)

	assertPanic("div_s", 1, 0)
	assertPanic("div_s", 0, 0)
	assertPanic("div_s", 0x8000000000000000, 0xffffffffffffffff)
	assertPanic("div_s", 0x8000000000000000, 0)
	assertBinaryOpExpI64("div_s", 1, 1, 1)
	assertBinaryOpExpI64("div_s", 0, 1, 0)
	assertBinaryOpExpI64("div_s", 0, 0xffffffffffffffff, 0)
	assertBinaryOpExpI64("div_s", 0xffffffffffffffff, 0xffffffffffffffff, 1)
	assertBinaryOpExpI64("div_s", 0x8000000000000000, 2, 0xc000000000000000)
	assertBinaryOpExpI64("div_s", 0x8000000000000001, 1000, 0xffdf3b645a1cac09)
	assertBinaryOpExpI64("div_s", 5, 2, 2)
	assertBinaryOpExpI64("div_s", 0xfffffffffffffffb, 2, 0xfffffffffffffffe)
	assertBinaryOpExpI64("div_s", 5, 0xfffffffffffffffe, 0xfffffffffffffffe)
	assertBinaryOpExpI64("div_s", 0xfffffffffffffffb, 0xfffffffffffffffe, 2)
	assertBinaryOpExpI64("div_s", 7, 3, 2)
	assertBinaryOpExpI64("div_s", 0xfffffffffffffff9, 3, 0xfffffffffffffffe)
	assertBinaryOpExpI64("div_s", 7, 0xfffffffffffffffd, 0xfffffffffffffffe)
	assertBinaryOpExpI64("div_s", 0xfffffffffffffff9, 0xfffffffffffffffd, 2)
	assertBinaryOpExpI64("div_s", 11, 5, 2)
	assertBinaryOpExpI64("div_s", 17, 7, 2)

	assertPanic("div_u", 1, 0)
	assertPanic("div_u", 0, 0)
	assertBinaryOpExpI64("div_u", 1, 1, 1)
	assertBinaryOpExpI64("div_u", 0, 1, 0)
	assertBinaryOpExpI64("div_u", 0xffffffffffffffff, 0xffffffffffffffff, 1)
	assertBinaryOpExpI64("div_u", 0x8000000000000000, 0xffffffffffffffff, 0)
	assertBinaryOpExpI64("div_u", 0x8000000000000000, 2, 0x4000000000000000)
	assertBinaryOpExpI64("div_u", 0x8ff00ff00ff00ff0, 0x100000001, 0x8ff00fef)
	assertBinaryOpExpI64("div_u", 0x8000000000000001, 1000, 0x20c49ba5e353f7)
	assertBinaryOpExpI64("div_u", 5, 2, 2)
	assertBinaryOpExpI64("div_u", 0xfffffffffffffffb, 2, 0x7ffffffffffffffd)
	assertBinaryOpExpI64("div_u", 5, 0xfffffffffffffffe, 0)
	assertBinaryOpExpI64("div_u", 0xfffffffffffffffb, 0xfffffffffffffffe, 0)
	assertBinaryOpExpI64("div_u", 7, 3, 2)
	assertBinaryOpExpI64("div_u", 11, 5, 2)
	assertBinaryOpExpI64("div_u", 17, 7, 2)

	assertPanic("rem_s", 1, 0)
	assertPanic("rem_s", 0, 0)
	assertBinaryOpExpI64("rem_s", 0x7fffffffffffffff, 0xffffffffffffffff, 0)
	assertBinaryOpExpI64("rem_s", 1, 1, 0)
	assertBinaryOpExpI64("rem_s", 0, 1, 0)
	assertBinaryOpExpI64("rem_s", 0, 0xffffffffffffffff, 0)
	assertBinaryOpExpI64("rem_s", 0xffffffffffffffff, 0xffffffffffffffff, 0)
	assertBinaryOpExpI64("rem_s", 0x8000000000000000, 0xffffffffffffffff, 0)
	assertBinaryOpExpI64("rem_s", 0x8000000000000000, 2, 0)
	assertBinaryOpExpI64("rem_s", 0x8000000000000001, 1000, 0xfffffffffffffcd9)
	assertBinaryOpExpI64("rem_s", 5, 2, 1)
	assertBinaryOpExpI64("rem_s", 0xfffffffffffffffb, 2, 0xffffffffffffffff)
	assertBinaryOpExpI64("rem_s", 5, 0xfffffffffffffffe, 1)
	assertBinaryOpExpI64("rem_s", 0xfffffffffffffffb, 0xfffffffffffffffe, 0xffffffffffffffff)
	assertBinaryOpExpI64("rem_s", 7, 3, 1)
	assertBinaryOpExpI64("rem_s", 0xfffffffffffffff9, 3, 0xffffffffffffffff)
	assertBinaryOpExpI64("rem_s", 7, 0xfffffffffffffffd, 1)
	assertBinaryOpExpI64("rem_s", 0xfffffffffffffff9, 0xfffffffffffffffd, 0xffffffffffffffff)
	assertBinaryOpExpI64("rem_s", 11, 5, 1)
	assertBinaryOpExpI64("rem_s", 17, 7, 3)

	assertPanic("rem_u", 1, 0)
	assertPanic("rem_u", 0, 0)
	assertBinaryOpExpI64("rem_u", 1, 1, 0)
	assertBinaryOpExpI64("rem_u", 0, 1, 0)
	assertBinaryOpExpI64("rem_u", 0xffffffffffffffff, 0xffffffffffffffff, 0)
	assertBinaryOpExpI64("rem_u", 0x8000000000000000, 0xffffffffffffffff, 0x8000000000000000)
	assertBinaryOpExpI64("rem_u", 0x8000000000000000, 2, 0)
	assertBinaryOpExpI64("rem_u", 0x8ff00ff00ff00ff0, 0x100000001, 0x80000001)
	assertBinaryOpExpI64("rem_u", 0x8000000000000001, 1000, 809)
	assertBinaryOpExpI64("rem_u", 5, 2, 1)
	assertBinaryOpExpI64("rem_u", 0xfffffffffffffffb, 2, 1)
	assertBinaryOpExpI64("rem_u", 5, 0xfffffffffffffffe, 5)
	assertBinaryOpExpI64("rem_u", 0xfffffffffffffffb, 0xfffffffffffffffe, 0xfffffffffffffffb)
	assertBinaryOpExpI64("rem_u", 7, 3, 1)
	assertBinaryOpExpI64("rem_u", 11, 5, 1)
	assertBinaryOpExpI64("rem_u", 17, 7, 3)

	assertBinaryOpExpI64("and", 1, 0, 0)
	assertBinaryOpExpI64("and", 0, 1, 0)
	assertBinaryOpExpI64("and", 1, 1, 1)
	assertBinaryOpExpI64("and", 0, 0, 0)
	assertBinaryOpExpI64("and", 0x7fffffffffffffff, 0x8000000000000000, 0)
	assertBinaryOpExpI64("and", 0x7fffffffffffffff, 0xffffffffffffffff, 0x7fffffffffffffff)
	assertBinaryOpExpI64("and", 0xf0f0ffff, 0xfffff0f0, 0xf0f0f0f0)
	assertBinaryOpExpI64("and", 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff)

	assertBinaryOpExpI64("or", 1, 0, 1)
	assertBinaryOpExpI64("or", 0, 1, 1)
	assertBinaryOpExpI64("or", 1, 1, 1)
	assertBinaryOpExpI64("or", 0, 0, 0)
	assertBinaryOpExpI64("or", 0x7fffffffffffffff, 0x8000000000000000, 0xffffffffffffffff)
	assertBinaryOpExpI64("or", 0x8000000000000000, 0, 0x8000000000000000)
	assertBinaryOpExpI64("or", 0xf0f0ffff, 0xfffff0f0, 0xffffffff)
	assertBinaryOpExpI64("or", 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff)

	assertBinaryOpExpI64("xor", 1, 0, 1)
	assertBinaryOpExpI64("xor", 0, 1, 1)
	assertBinaryOpExpI64("xor", 1, 1, 0)
	assertBinaryOpExpI64("xor", 0, 0, 0)
	assertBinaryOpExpI64("xor", 0x7fffffffffffffff, 0x8000000000000000, 0xffffffffffffffff)
	assertBinaryOpExpI64("xor", 0x8000000000000000, 0, 0x8000000000000000)
	assertBinaryOpExpI64("xor", 0xffffffffffffffff, 0x8000000000000000, 0x7fffffffffffffff)
	assertBinaryOpExpI64("xor", 0xffffffffffffffff, 0x7fffffffffffffff, 0x8000000000000000)
	assertBinaryOpExpI64("xor", 0xf0f0ffff, 0xfffff0f0, 0x0f0f0f0f)
	assertBinaryOpExpI64("xor", 0xffffffffffffffff, 0xffffffffffffffff, 0)

	assertBinaryOpExpI64("shl", 1, 1, 2)
	assertBinaryOpExpI64("shl", 1, 0, 1)
	assertBinaryOpExpI64("shl", 0x7fffffffffffffff, 1, 0xfffffffffffffffe)
	assertBinaryOpExpI64("shl", 0xffffffffffffffff, 1, 0xfffffffffffffffe)
	assertBinaryOpExpI64("shl", 0x8000000000000000, 1, 0)
	assertBinaryOpExpI64("shl", 0x4000000000000000, 1, 0x8000000000000000)
	assertBinaryOpExpI64("shl", 1, 63, 0x8000000000000000)
	assertBinaryOpExpI64("shl", 1, 64, 1)
	assertBinaryOpExpI64("shl", 1, 65, 2)
	assertBinaryOpExpI64("shl", 1, 0xffffffffffffffff, 0x8000000000000000)
	assertBinaryOpExpI64("shl", 1, 0x7fffffffffffffff, 0x8000000000000000)

	assertBinaryOpExpI64("shr_s", 1, 1, 0)
	assertBinaryOpExpI64("shr_s", 1, 0, 1)
	assertBinaryOpExpI64("shr_s", 0xffffffffffffffff, 1, 0xffffffffffffffff)
	assertBinaryOpExpI64("shr_s", 0x7fffffffffffffff, 1, 0x3fffffffffffffff)
	assertBinaryOpExpI64("shr_s", 0x8000000000000000, 1, 0xc000000000000000)
	assertBinaryOpExpI64("shr_s", 0x4000000000000000, 1, 0x2000000000000000)
	assertBinaryOpExpI64("shr_s", 1, 64, 1)
	assertBinaryOpExpI64("shr_s", 1, 65, 0)
	assertBinaryOpExpI64("shr_s", 1, 0xffffffffffffffff, 0)
	assertBinaryOpExpI64("shr_s", 1, 0x7fffffffffffffff, 0)
	assertBinaryOpExpI64("shr_s", 1, 0x8000000000000000, 1)
	assertBinaryOpExpI64("shr_s", 0x8000000000000000, 63, 0xffffffffffffffff)
	assertBinaryOpExpI64("shr_s", 0xffffffffffffffff, 64, 0xffffffffffffffff)
	assertBinaryOpExpI64("shr_s", 0xffffffffffffffff, 65, 0xffffffffffffffff)
	assertBinaryOpExpI64("shr_s", 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff)
	assertBinaryOpExpI64("shr_s", 0xffffffffffffffff, 0x7fffffffffffffff, 0xffffffffffffffff)
	assertBinaryOpExpI64("shr_s", 0xffffffffffffffff, 0x8000000000000000, 0xffffffffffffffff)

	assertBinaryOpExpI64("shr_u", 1, 1, 0)
	assertBinaryOpExpI64("shr_u", 1, 0, 1)
	assertBinaryOpExpI64("shr_u", 0xffffffffffffffff, 1, 0x7fffffffffffffff)
	assertBinaryOpExpI64("shr_u", 0x7fffffffffffffff, 1, 0x3fffffffffffffff)
	assertBinaryOpExpI64("shr_u", 0x8000000000000000, 1, 0x4000000000000000)
	assertBinaryOpExpI64("shr_u", 0x4000000000000000, 1, 0x2000000000000000)
	assertBinaryOpExpI64("shr_u", 1, 64, 1)
	assertBinaryOpExpI64("shr_u", 1, 65, 0)
	assertBinaryOpExpI64("shr_u", 1, 0xffffffffffffffff, 0)
	assertBinaryOpExpI64("shr_u", 1, 0x7fffffffffffffff, 0)
	assertBinaryOpExpI64("shr_u", 1, 0x8000000000000000, 1)
	assertBinaryOpExpI64("shr_u", 0x8000000000000000, 63, 1)
	assertBinaryOpExpI64("shr_u", 0xffffffffffffffff, 64, 0xffffffffffffffff)
	assertBinaryOpExpI64("shr_u", 0xffffffffffffffff, 65, 0x7fffffffffffffff)
	assertBinaryOpExpI64("shr_u", 0xffffffffffffffff, 0xffffffffffffffff, 1)
	assertBinaryOpExpI64("shr_u", 0xffffffffffffffff, 0x7fffffffffffffff, 1)
	assertBinaryOpExpI64("shr_u", 0xffffffffffffffff, 0x8000000000000000, 0xffffffffffffffff)

	assertBinaryOpExpI64("rotl", 1, 1, 2)
	assertBinaryOpExpI64("rotl", 1, 0, 1)
	assertBinaryOpExpI64("rotl", 0xffffffffffffffff, 1, 0xffffffffffffffff)
	assertBinaryOpExpI64("rotl", 1, 64, 1)
	assertBinaryOpExpI64("rotl", 0xabcd987602468ace, 1, 0x579b30ec048d159d)
	assertBinaryOpExpI64("rotl", 0xfe000000dc000000, 4, 0xe000000dc000000f)
	assertBinaryOpExpI64("rotl", 0xabcd1234ef567809, 53, 0x013579a2469deacf)
	assertBinaryOpExpI64("rotl", 0xabd1234ef567809c, 63, 0x55e891a77ab3c04e)
	assertBinaryOpExpI64("rotl", 0xabcd1234ef567809, 0xf5, 0x013579a2469deacf)
	assertBinaryOpExpI64("rotl", 0xabcd7294ef567809, 0xffffffffffffffed, 0xcf013579ae529dea)
	assertBinaryOpExpI64("rotl", 0xabd1234ef567809c, 0x800000000000003f, 0x55e891a77ab3c04e)
	assertBinaryOpExpI64("rotl", 1, 63, 0x8000000000000000)
	assertBinaryOpExpI64("rotl", 0x8000000000000000, 1, 1)

	assertBinaryOpExpI64("rotr", 1, 1, 0x8000000000000000)
	assertBinaryOpExpI64("rotr", 1, 0, 1)
	assertBinaryOpExpI64("rotr", 0xffffffffffffffff, 1, 0xffffffffffffffff)
	assertBinaryOpExpI64("rotr", 1, 64, 1)
	assertBinaryOpExpI64("rotr", 0xabcd987602468ace, 1, 0x55e6cc3b01234567)
	assertBinaryOpExpI64("rotr", 0xfe000000dc000000, 4, 0x0fe000000dc00000)
	assertBinaryOpExpI64("rotr", 0xabcd1234ef567809, 53, 0x6891a77ab3c04d5e)
	assertBinaryOpExpI64("rotr", 0xabd1234ef567809c, 63, 0x57a2469deacf0139)
	assertBinaryOpExpI64("rotr", 0xabcd1234ef567809, 0xf5, 0x6891a77ab3c04d5e)
	assertBinaryOpExpI64("rotr", 0xabcd7294ef567809, 0xffffffffffffffed, 0x94a77ab3c04d5e6b)
	assertBinaryOpExpI64("rotr", 0xabd1234ef567809c, 0x800000000000003f, 0x57a2469deacf0139)
	assertBinaryOpExpI64("rotr", 1, 63, 2)
	assertBinaryOpExpI64("rotr", 0x8000000000000000, 63, 1)

	assertUnaryOpExpI64("clz", 0xffffffffffffffff, 0)
	assertUnaryOpExpI64("clz", 0, 64)
	assertUnaryOpExpI64("clz", 0x00008000, 48)
	assertUnaryOpExpI64("clz", 0xff, 56)
	assertUnaryOpExpI64("clz", 0x8000000000000000, 0)
	assertUnaryOpExpI64("clz", 1, 63)
	assertUnaryOpExpI64("clz", 2, 62)
	assertUnaryOpExpI64("clz", 0x7fffffffffffffff, 1)

	assertUnaryOpExpI64("ctz", 0xffffffffffffffff, 0)
	assertUnaryOpExpI64("ctz", 0, 64)
	assertUnaryOpExpI64("ctz", 0x00008000, 15)
	assertUnaryOpExpI64("ctz", 0x00010000, 16)
	assertUnaryOpExpI64("ctz", 0x8000000000000000, 63)
	assertUnaryOpExpI64("ctz", 0x7fffffffffffffff, 0)

	assertUnaryOpExpI64("popcnt", 0xffffffffffffffff, 64)
	assertUnaryOpExpI64("popcnt", 0, 0)
	assertUnaryOpExpI64("popcnt", 0x00008000, 1)
	assertUnaryOpExpI64("popcnt", 0x8000800080008000, 4)
	assertUnaryOpExpI64("popcnt", 0x7fffffffffffffff, 63)
	assertUnaryOpExpI64("popcnt", 0xAAAAAAAA55555555, 32)
	assertUnaryOpExpI64("popcnt", 0x99999999AAAAAAAA, 32)
	assertUnaryOpExpI64("popcnt", 0xDEADBEEFDEADBEEF, 48)

	// FIXME: add support extend instructions introduced in 1.1
	// https://github.com/WebAssembly/spec/blob/master/proposals/sign-extension-ops/Overview.md
	// assertUnaryOpExpI64("extend8_s", 0, 0)
	// assertUnaryOpExpI64("extend8_s", 0x7f, 127)
	// assertUnaryOpExpI64("extend8_s", 0x80, -128)
	// assertUnaryOpExpI64("extend8_s", 0xff, 0xffffffffffffffff)
	// assertUnaryOpExpI64("extend8_s", 0x01234567_89abcd_00, 0)
	// assertUnaryOpExpI64("extend8_s", 0xfedcba98_765432_80, -0x80)
	// assertUnaryOpExpI64("extend8_s", 0xffffffffffffffff, 0xffffffffffffffff)

	// assertUnaryOpExpI64("extend16_s", 0, 0)
	// assertUnaryOpExpI64("extend16_s", 0x7fff, 32767)
	// assertUnaryOpExpI64("extend16_s", 0x8000, -32768)
	// assertUnaryOpExpI64("extend16_s", 0xffff, 0xffffffffffffffff)
	// assertUnaryOpExpI64("extend16_s", 0x12345678_9abc_0000, 0)
	// assertUnaryOpExpI64("extend16_s", 0xfedcba98_7654_8000, -0x8000)
	// assertUnaryOpExpI64("extend16_s", 0xffffffffffffffff, 0xffffffffffffffff)

	// assertUnaryOpExpI64("extend32_s", 0, 0)
	// assertUnaryOpExpI64("extend32_s", 0x7fff, 32767)
	// assertUnaryOpExpI64("extend32_s", 0x8000, 32768)
	// assertUnaryOpExpI64("extend32_s", 0xffff, 65535)
	// assertUnaryOpExpI64("extend32_s", 0x7fffffff, 0x7fffffff)
	// assertUnaryOpExpI64("extend32_s", 0x80000000, -0x80000000)
	// assertUnaryOpExpI64("extend32_s", 0xffffffff, 0xffffffffffffffff)
	// assertUnaryOpExpI64("extend32_s", 0x01234567_00000000, 0)
	// assertUnaryOpExpI64("extend32_s", 0xfedcba98_80000000, -0x80000000)
	// assertUnaryOpExpI64("extend32_s", 0xffffffffffffffff, 0xffffffffffffffff)

	assertUnaryOpExpI32("eqz", 0, 1)
	assertUnaryOpExpI32("eqz", 1, 0)
	assertUnaryOpExpI32("eqz", 0x8000000000000000, 0)
	assertUnaryOpExpI32("eqz", 0x7fffffffffffffff, 0)
	assertUnaryOpExpI32("eqz", 0xffffffffffffffff, 0)

	assertBinaryOpExpI32("eq", 0, 0, 1)
	assertBinaryOpExpI32("eq", 1, 1, 1)
	assertBinaryOpExpI32("eq", 0xffffffffffffffff, 1, 0)
	assertBinaryOpExpI32("eq", 0x8000000000000000, 0x8000000000000000, 1)
	assertBinaryOpExpI32("eq", 0x7fffffffffffffff, 0x7fffffffffffffff, 1)
	assertBinaryOpExpI32("eq", 0xffffffffffffffff, 0xffffffffffffffff, 1)
	assertBinaryOpExpI32("eq", 1, 0, 0)
	assertBinaryOpExpI32("eq", 0, 1, 0)
	assertBinaryOpExpI32("eq", 0x8000000000000000, 0, 0)
	assertBinaryOpExpI32("eq", 0, 0x8000000000000000, 0)
	assertBinaryOpExpI32("eq", 0x8000000000000000, 0xffffffffffffffff, 0)
	assertBinaryOpExpI32("eq", 0xffffffffffffffff, 0x8000000000000000, 0)
	assertBinaryOpExpI32("eq", 0x8000000000000000, 0x7fffffffffffffff, 0)
	assertBinaryOpExpI32("eq", 0x7fffffffffffffff, 0x8000000000000000, 0)

	assertBinaryOpExpI32("ne", 0, 0, 0)
	assertBinaryOpExpI32("ne", 1, 1, 0)
	assertBinaryOpExpI32("ne", 0xffffffffffffffff, 1, 1)
	assertBinaryOpExpI32("ne", 0x8000000000000000, 0x8000000000000000, 0)
	assertBinaryOpExpI32("ne", 0x7fffffffffffffff, 0x7fffffffffffffff, 0)
	assertBinaryOpExpI32("ne", 0xffffffffffffffff, 0xffffffffffffffff, 0)
	assertBinaryOpExpI32("ne", 1, 0, 1)
	assertBinaryOpExpI32("ne", 0, 1, 1)
	assertBinaryOpExpI32("ne", 0x8000000000000000, 0, 1)
	assertBinaryOpExpI32("ne", 0, 0x8000000000000000, 1)
	assertBinaryOpExpI32("ne", 0x8000000000000000, 0xffffffffffffffff, 1)
	assertBinaryOpExpI32("ne", 0xffffffffffffffff, 0x8000000000000000, 1)
	assertBinaryOpExpI32("ne", 0x8000000000000000, 0x7fffffffffffffff, 1)
	assertBinaryOpExpI32("ne", 0x7fffffffffffffff, 0x8000000000000000, 1)

	assertBinaryOpExpI32("lt_s", 0, 0, 0)
	assertBinaryOpExpI32("lt_s", 1, 1, 0)
	assertBinaryOpExpI32("lt_s", 0xffffffffffffffff, 1, 1)
	assertBinaryOpExpI32("lt_s", 0x8000000000000000, 0x8000000000000000, 0)
	assertBinaryOpExpI32("lt_s", 0x7fffffffffffffff, 0x7fffffffffffffff, 0)
	assertBinaryOpExpI32("lt_s", 0xffffffffffffffff, 0xffffffffffffffff, 0)
	assertBinaryOpExpI32("lt_s", 1, 0, 0)
	assertBinaryOpExpI32("lt_s", 0, 1, 1)
	assertBinaryOpExpI32("lt_s", 0x8000000000000000, 0, 1)
	assertBinaryOpExpI32("lt_s", 0, 0x8000000000000000, 0)
	assertBinaryOpExpI32("lt_s", 0x8000000000000000, 0xffffffffffffffff, 1)
	assertBinaryOpExpI32("lt_s", 0xffffffffffffffff, 0x8000000000000000, 0)
	assertBinaryOpExpI32("lt_s", 0x8000000000000000, 0x7fffffffffffffff, 1)
	assertBinaryOpExpI32("lt_s", 0x7fffffffffffffff, 0x8000000000000000, 0)

	assertBinaryOpExpI32("lt_u", 0, 0, 0)
	assertBinaryOpExpI32("lt_u", 1, 1, 0)
	assertBinaryOpExpI32("lt_u", 0xffffffffffffffff, 1, 0)
	assertBinaryOpExpI32("lt_u", 0x8000000000000000, 0x8000000000000000, 0)
	assertBinaryOpExpI32("lt_u", 0x7fffffffffffffff, 0x7fffffffffffffff, 0)
	assertBinaryOpExpI32("lt_u", 0xffffffffffffffff, 0xffffffffffffffff, 0)
	assertBinaryOpExpI32("lt_u", 1, 0, 0)
	assertBinaryOpExpI32("lt_u", 0, 1, 1)
	assertBinaryOpExpI32("lt_u", 0x8000000000000000, 0, 0)
	assertBinaryOpExpI32("lt_u", 0, 0x8000000000000000, 1)
	assertBinaryOpExpI32("lt_u", 0x8000000000000000, 0xffffffffffffffff, 1)
	assertBinaryOpExpI32("lt_u", 0xffffffffffffffff, 0x8000000000000000, 0)
	assertBinaryOpExpI32("lt_u", 0x8000000000000000, 0x7fffffffffffffff, 0)
	assertBinaryOpExpI32("lt_u", 0x7fffffffffffffff, 0x8000000000000000, 1)

	assertBinaryOpExpI32("le_s", 0, 0, 1)
	assertBinaryOpExpI32("le_s", 1, 1, 1)
	assertBinaryOpExpI32("le_s", 0xffffffffffffffff, 1, 1)
	assertBinaryOpExpI32("le_s", 0x8000000000000000, 0x8000000000000000, 1)
	assertBinaryOpExpI32("le_s", 0x7fffffffffffffff, 0x7fffffffffffffff, 1)
	assertBinaryOpExpI32("le_s", 0xffffffffffffffff, 0xffffffffffffffff, 1)
	assertBinaryOpExpI32("le_s", 1, 0, 0)
	assertBinaryOpExpI32("le_s", 0, 1, 1)
	assertBinaryOpExpI32("le_s", 0x8000000000000000, 0, 1)
	assertBinaryOpExpI32("le_s", 0, 0x8000000000000000, 0)
	assertBinaryOpExpI32("le_s", 0x8000000000000000, 0xffffffffffffffff, 1)
	assertBinaryOpExpI32("le_s", 0xffffffffffffffff, 0x8000000000000000, 0)
	assertBinaryOpExpI32("le_s", 0x8000000000000000, 0x7fffffffffffffff, 1)
	assertBinaryOpExpI32("le_s", 0x7fffffffffffffff, 0x8000000000000000, 0)

	assertBinaryOpExpI32("le_u", 0, 0, 1)
	assertBinaryOpExpI32("le_u", 1, 1, 1)
	assertBinaryOpExpI32("le_u", 0xffffffffffffffff, 1, 0)
	assertBinaryOpExpI32("le_u", 0x8000000000000000, 0x8000000000000000, 1)
	assertBinaryOpExpI32("le_u", 0x7fffffffffffffff, 0x7fffffffffffffff, 1)
	assertBinaryOpExpI32("le_u", 0xffffffffffffffff, 0xffffffffffffffff, 1)
	assertBinaryOpExpI32("le_u", 1, 0, 0)
	assertBinaryOpExpI32("le_u", 0, 1, 1)
	assertBinaryOpExpI32("le_u", 0x8000000000000000, 0, 0)
	assertBinaryOpExpI32("le_u", 0, 0x8000000000000000, 1)
	assertBinaryOpExpI32("le_u", 0x8000000000000000, 0xffffffffffffffff, 1)
	assertBinaryOpExpI32("le_u", 0xffffffffffffffff, 0x8000000000000000, 0)
	assertBinaryOpExpI32("le_u", 0x8000000000000000, 0x7fffffffffffffff, 0)
	assertBinaryOpExpI32("le_u", 0x7fffffffffffffff, 0x8000000000000000, 1)

	assertBinaryOpExpI32("gt_s", 0, 0, 0)
	assertBinaryOpExpI32("gt_s", 1, 1, 0)
	assertBinaryOpExpI32("gt_s", 0xffffffffffffffff, 1, 0)
	assertBinaryOpExpI32("gt_s", 0x8000000000000000, 0x8000000000000000, 0)
	assertBinaryOpExpI32("gt_s", 0x7fffffffffffffff, 0x7fffffffffffffff, 0)
	assertBinaryOpExpI32("gt_s", 0xffffffffffffffff, 0xffffffffffffffff, 0)
	assertBinaryOpExpI32("gt_s", 1, 0, 1)
	assertBinaryOpExpI32("gt_s", 0, 1, 0)
	assertBinaryOpExpI32("gt_s", 0x8000000000000000, 0, 0)
	assertBinaryOpExpI32("gt_s", 0, 0x8000000000000000, 1)
	assertBinaryOpExpI32("gt_s", 0x8000000000000000, 0xffffffffffffffff, 0)
	assertBinaryOpExpI32("gt_s", 0xffffffffffffffff, 0x8000000000000000, 1)
	assertBinaryOpExpI32("gt_s", 0x8000000000000000, 0x7fffffffffffffff, 0)
	assertBinaryOpExpI32("gt_s", 0x7fffffffffffffff, 0x8000000000000000, 1)

	assertBinaryOpExpI32("gt_u", 0, 0, 0)
	assertBinaryOpExpI32("gt_u", 1, 1, 0)
	assertBinaryOpExpI32("gt_u", 0xffffffffffffffff, 1, 1)
	assertBinaryOpExpI32("gt_u", 0x8000000000000000, 0x8000000000000000, 0)
	assertBinaryOpExpI32("gt_u", 0x7fffffffffffffff, 0x7fffffffffffffff, 0)
	assertBinaryOpExpI32("gt_u", 0xffffffffffffffff, 0xffffffffffffffff, 0)
	assertBinaryOpExpI32("gt_u", 1, 0, 1)
	assertBinaryOpExpI32("gt_u", 0, 1, 0)
	assertBinaryOpExpI32("gt_u", 0x8000000000000000, 0, 1)
	assertBinaryOpExpI32("gt_u", 0, 0x8000000000000000, 0)
	assertBinaryOpExpI32("gt_u", 0x8000000000000000, 0xffffffffffffffff, 0)
	assertBinaryOpExpI32("gt_u", 0xffffffffffffffff, 0x8000000000000000, 1)
	assertBinaryOpExpI32("gt_u", 0x8000000000000000, 0x7fffffffffffffff, 1)
	assertBinaryOpExpI32("gt_u", 0x7fffffffffffffff, 0x8000000000000000, 0)

	assertBinaryOpExpI32("ge_s", 0, 0, 1)
	assertBinaryOpExpI32("ge_s", 1, 1, 1)
	assertBinaryOpExpI32("ge_s", 0xffffffffffffffff, 1, 0)
	assertBinaryOpExpI32("ge_s", 0x8000000000000000, 0x8000000000000000, 1)
	assertBinaryOpExpI32("ge_s", 0x7fffffffffffffff, 0x7fffffffffffffff, 1)
	assertBinaryOpExpI32("ge_s", 0xffffffffffffffff, 0xffffffffffffffff, 1)
	assertBinaryOpExpI32("ge_s", 1, 0, 1)
	assertBinaryOpExpI32("ge_s", 0, 1, 0)
	assertBinaryOpExpI32("ge_s", 0x8000000000000000, 0, 0)
	assertBinaryOpExpI32("ge_s", 0, 0x8000000000000000, 1)
	assertBinaryOpExpI32("ge_s", 0x8000000000000000, 0xffffffffffffffff, 0)
	assertBinaryOpExpI32("ge_s", 0xffffffffffffffff, 0x8000000000000000, 1)
	assertBinaryOpExpI32("ge_s", 0x8000000000000000, 0x7fffffffffffffff, 0)
	assertBinaryOpExpI32("ge_s", 0x7fffffffffffffff, 0x8000000000000000, 1)

	assertBinaryOpExpI32("ge_u", 0, 0, 1)
	assertBinaryOpExpI32("ge_u", 1, 1, 1)
	assertBinaryOpExpI32("ge_u", 0xffffffffffffffff, 1, 1)
	assertBinaryOpExpI32("ge_u", 0x8000000000000000, 0x8000000000000000, 1)
	assertBinaryOpExpI32("ge_u", 0x7fffffffffffffff, 0x7fffffffffffffff, 1)
	assertBinaryOpExpI32("ge_u", 0xffffffffffffffff, 0xffffffffffffffff, 1)
	assertBinaryOpExpI32("ge_u", 1, 0, 1)
	assertBinaryOpExpI32("ge_u", 0, 1, 0)
	assertBinaryOpExpI32("ge_u", 0x8000000000000000, 0, 1)
	assertBinaryOpExpI32("ge_u", 0, 0x8000000000000000, 0)
	assertBinaryOpExpI32("ge_u", 0x8000000000000000, 0xffffffffffffffff, 0)
	assertBinaryOpExpI32("ge_u", 0xffffffffffffffff, 0x8000000000000000, 1)
	assertBinaryOpExpI32("ge_u", 0x8000000000000000, 0x7fffffffffffffff, 1)
	assertBinaryOpExpI32("ge_u", 0x7fffffffffffffff, 0x8000000000000000, 0)
}
