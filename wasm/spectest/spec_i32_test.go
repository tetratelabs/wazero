package spectest

import (
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/mathetake/gasm/wasm"
)

func Test_i32(t *testing.T) {
	/*
		;; \(assert_return\s\(invoke\s("[a-zA-Z_0-9]+")\s\(i32.const\s((\.|:|-|\+|[0-9A-Za-z_])+)\)\s\(i32.const\s((\.|-|:|\+|[0-9a-zA-Z_])+)\)\)\s\(i32.const\s((\.|-|:|\+|[0-9a-zA-Z_])+)\)\)
		->
		assertBinaryOp($1, $2, $4, $6)

		;; \(assert_return\s\(invoke\s("[a-zA-Z_0-9]+")\s\(i32.const\s((\.|:|-|\+|[0-9A-Za-z_])+)\)\)\s\(i32.const\s((\.|-|:|\+|[0-9a-zA-Z_])+)\)\)
		->
		assertUnaryOp($1, $2, $4)

		;; \(assert_trap\s\(invoke\s("[a-zA-Z_0-9]+")\s\(i32.const\s((\.|:|-|\+|[0-9A-Za-z])+)\)\s\(i32.const\s((\.|-|:|\+|[0-9a-zA-Z])+)\)\)\s"[a-z\s]+"\)
		->
		assertPanic($1, $2, $4)
	*/

	vm := requireInitVM(t, "i32", nil)
	assertBinaryOp := func(name string, arg1, arg2, exp uint32) {
		values, types, err := vm.ExecExportedFunction(name, uint64(uint32(arg1)), uint64(uint32(arg2)))
		if !(assert.NoError(t, err) &&
			assert.Len(t, values, 1) &&
			assert.Len(t, types, 1) &&
			assert.Equal(t, types[0], wasm.ValueTypeI32) && assert.Equal(t, exp, uint32(values[0]))) {
			panic(name + " failed")
		}
	}
	assertUnaryOp := func(name string, arg, exp uint32) {
		values, types, err := vm.ExecExportedFunction(name, uint64(uint32(arg)))
		if !(assert.NoError(t, err) &&
			assert.Len(t, values, 1) &&
			assert.Len(t, types, 1) &&
			assert.Equal(t, types[0], wasm.ValueTypeI32) && assert.Equal(t, exp, uint32(values[0]))) {
			panic(name + " failed")
		}
	}
	assertPanic := func(name string, arg1, arg2 uint32) {
		if !assert.Panics(t, func() {
			_, _, _ = vm.ExecExportedFunction(name, uint64(uint32(arg1)), uint64(uint32(arg2)))
		}) {
			panic(name + " failed")
		}
	}

	assertBinaryOp("add", 1, 1, 2)
	assertBinaryOp("add", 1, 0, 1)
	assertBinaryOp("add", 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFE)
	assertBinaryOp("add", 0xFFFFFFFF, 1, 0)

	assertBinaryOp("add", 0x7fffffff, 1, 0x80000000)
	assertBinaryOp("add", 0x80000000, 0xFFFFFFFF, 0x7fffffff)
	assertBinaryOp("add", 0x80000000, 0x80000000, 0)
	assertBinaryOp("add", 0x3fffffff, 1, 0x40000000)

	assertBinaryOp("sub", 1, 1, 0)
	assertBinaryOp("sub", 1, 0, 1)
	assertBinaryOp("sub", 0xFFFFFFFF, 0xFFFFFFFF, 0)
	assertBinaryOp("sub", 0x7fffffff, 0xFFFFFFFF, 0x80000000)
	assertBinaryOp("sub", 0x80000000, 1, 0x7fffffff)
	assertBinaryOp("sub", 0x80000000, 0x80000000, 0)
	assertBinaryOp("sub", 0x3fffffff, 0xFFFFFFFF, 0x40000000)

	assertBinaryOp("mul", 1, 1, 1)
	assertBinaryOp("mul", 1, 0, 0)
	assertBinaryOp("mul", 0xFFFFFFFF, 0xFFFFFFFF, 1)
	assertBinaryOp("mul", 0x10000000, 4096, 0)
	assertBinaryOp("mul", 0x80000000, 0, 0)
	assertBinaryOp("mul", 0x80000000, 0xFFFFFFFF, 0x80000000)
	assertBinaryOp("mul", 0x7fffffff, 0xFFFFFFFF, 0x80000001)
	assertBinaryOp("mul", 0x01234567, 0x76543210, 0x358e7470)
	assertBinaryOp("mul", 0x7fffffff, 0x7fffffff, 1)

	assertPanic("div_s", 1, 0)
	assertPanic("div_s", 0, 0)
	assertPanic("div_s", 0x80000000, 0xFFFFFFFF)
	assertPanic("div_s", 0x80000000, 0)
	assertBinaryOp("div_s", 1, 1, 1)
	assertBinaryOp("div_s", 0, 1, 0)
	assertBinaryOp("div_s", 0, 0xFFFFFFFF, 0)
	assertBinaryOp("div_s", 0xFFFFFFFF, 0xFFFFFFFF, 1)
	assertBinaryOp("div_s", 0x80000000, 2, 0xc0000000)
	assertBinaryOp("div_s", 0x80000001, 1000, 0xffdf3b65)
	assertBinaryOp("div_s", 5, 2, 2)
	assertBinaryOp("div_s", 0xFFFFFFFB, 2, 0xFFFFFFFE)
	assertBinaryOp("div_s", 5, 0xFFFFFFFE, 0xFFFFFFFE)
	assertBinaryOp("div_s", 0xFFFFFFFB, 0xFFFFFFFE, 2)
	assertBinaryOp("div_s", 7, 3, 2)
	assertBinaryOp("div_s", 0xFFFFFFF9, 3, 0xFFFFFFFE)
	assertBinaryOp("div_s", 7, 0xFFFFFFFD, 0xFFFFFFFE)
	assertBinaryOp("div_s", 0xFFFFFFF9, 0xFFFFFFFD, 2)
	assertBinaryOp("div_s", 11, 5, 2)
	assertBinaryOp("div_s", 17, 7, 2)

	assertPanic("div_u", 1, 0)
	assertPanic("div_u", 0, 0)
	assertBinaryOp("div_u", 1, 1, 1)
	assertBinaryOp("div_u", 0, 1, 0)
	assertBinaryOp("div_u", 0xFFFFFFFF, 0xFFFFFFFF, 1)
	assertBinaryOp("div_u", 0x80000000, 0xFFFFFFFF, 0)
	assertBinaryOp("div_u", 0x80000000, 2, 0x40000000)
	assertBinaryOp("div_u", 0x8ff00ff0, 0x10001, 0x8fef)
	assertBinaryOp("div_u", 0x80000001, 1000, 0x20c49b)
	assertBinaryOp("div_u", 5, 2, 2)
	assertBinaryOp("div_u", 0xFFFFFFFB, 2, 0x7ffffffd)
	assertBinaryOp("div_u", 5, 0xFFFFFFFE, 0)
	assertBinaryOp("div_u", 0xFFFFFFFB, 0xFFFFFFFE, 0)
	assertBinaryOp("div_u", 7, 3, 2)
	assertBinaryOp("div_u", 11, 5, 2)
	assertBinaryOp("div_u", 17, 7, 2)

	assertPanic("rem_s", 1, 0)
	assertPanic("rem_s", 0, 0)
	assertBinaryOp("rem_s", 0x7fffffff, 0xFFFFFFFF, 0)
	assertBinaryOp("rem_s", 1, 1, 0)
	assertBinaryOp("rem_s", 0, 1, 0)
	assertBinaryOp("rem_s", 0, 0xFFFFFFFF, 0)
	assertBinaryOp("rem_s", 0xFFFFFFFF, 0xFFFFFFFF, 0)
	assertBinaryOp("rem_s", 0x80000000, 0xFFFFFFFF, 0)
	assertBinaryOp("rem_s", 0x80000000, 2, 0)
	assertBinaryOp("rem_s", 0x80000001, 1000, 0xFFFFFD79)
	assertBinaryOp("rem_s", 5, 2, 1)
	assertBinaryOp("rem_s", 0xFFFFFFFB, 2, 0xFFFFFFFF)
	assertBinaryOp("rem_s", 5, 0xFFFFFFFE, 1)
	assertBinaryOp("rem_s", 0xFFFFFFFB, 0xFFFFFFFE, 0xFFFFFFFF)
	assertBinaryOp("rem_s", 7, 3, 1)
	assertBinaryOp("rem_s", 0xFFFFFFF9, 3, 0xFFFFFFFF)
	assertBinaryOp("rem_s", 7, 0xFFFFFFFD, 1)
	assertBinaryOp("rem_s", 0xFFFFFFF9, 0xFFFFFFFD, 0xFFFFFFFF)
	assertBinaryOp("rem_s", 11, 5, 1)
	assertBinaryOp("rem_s", 17, 7, 3)

	assertPanic("rem_u", 1, 0)
	assertPanic("rem_u", 0, 0)
	assertBinaryOp("rem_u", 1, 1, 0)
	assertBinaryOp("rem_u", 0, 1, 0)
	assertBinaryOp("rem_u", 0xFFFFFFFF, 0xFFFFFFFF, 0)
	assertBinaryOp("rem_u", 0x80000000, 0xFFFFFFFF, 0x80000000)
	assertBinaryOp("rem_u", 0x80000000, 2, 0)
	assertBinaryOp("rem_u", 0x8ff00ff0, 0x10001, 0x8001)
	assertBinaryOp("rem_u", 0x80000001, 1000, 649)
	assertBinaryOp("rem_u", 5, 2, 1)
	assertBinaryOp("rem_u", 0xFFFFFFFB, 2, 1)
	assertBinaryOp("rem_u", 5, 0xFFFFFFFE, 5)
	assertBinaryOp("rem_u", 0xFFFFFFFB, 0xFFFFFFFE, 0xFFFFFFFB)
	assertBinaryOp("rem_u", 7, 3, 1)
	assertBinaryOp("rem_u", 11, 5, 1)
	assertBinaryOp("rem_u", 17, 7, 3)

	assertBinaryOp("and", 1, 0, 0)
	assertBinaryOp("and", 0, 1, 0)
	assertBinaryOp("and", 1, 1, 1)
	assertBinaryOp("and", 0, 0, 0)
	assertBinaryOp("and", 0x7fffffff, 0x80000000, 0)
	assertBinaryOp("and", 0x7fffffff, 0xFFFFFFFF, 0x7fffffff)
	assertBinaryOp("and", 0xf0f0ffff, 0xfffff0f0, 0xf0f0f0f0)
	assertBinaryOp("and", 0xffffffff, 0xffffffff, 0xffffffff)

	assertBinaryOp("or", 1, 0, 1)
	assertBinaryOp("or", 0, 1, 1)
	assertBinaryOp("or", 1, 1, 1)
	assertBinaryOp("or", 0, 0, 0)
	assertBinaryOp("or", 0x7fffffff, 0x80000000, 0xFFFFFFFF)
	assertBinaryOp("or", 0x80000000, 0, 0x80000000)
	assertBinaryOp("or", 0xf0f0ffff, 0xfffff0f0, 0xffffffff)
	assertBinaryOp("or", 0xffffffff, 0xffffffff, 0xffffffff)

	assertBinaryOp("xor", 1, 0, 1)
	assertBinaryOp("xor", 0, 1, 1)
	assertBinaryOp("xor", 1, 1, 0)
	assertBinaryOp("xor", 0, 0, 0)
	assertBinaryOp("xor", 0x7fffffff, 0x80000000, 0xFFFFFFFF)
	assertBinaryOp("xor", 0x80000000, 0, 0x80000000)
	assertBinaryOp("xor", 0xFFFFFFFF, 0x80000000, 0x7fffffff)
	assertBinaryOp("xor", 0xFFFFFFFF, 0x7fffffff, 0x80000000)
	assertBinaryOp("xor", 0xf0f0ffff, 0xfffff0f0, 0x0f0f0f0f)
	assertBinaryOp("xor", 0xffffffff, 0xffffffff, 0)

	assertBinaryOp("shl", 1, 1, 2)
	assertBinaryOp("shl", 1, 0, 1)
	assertBinaryOp("shl", 0x7fffffff, 1, 0xfffffffe)
	assertBinaryOp("shl", 0xffffffff, 1, 0xfffffffe)
	assertBinaryOp("shl", 0x80000000, 1, 0)
	assertBinaryOp("shl", 0x40000000, 1, 0x80000000)
	assertBinaryOp("shl", 1, 31, 0x80000000)
	assertBinaryOp("shl", 1, 32, 1)
	assertBinaryOp("shl", 1, 33, 2)
	assertBinaryOp("shl", 1, 0xFFFFFFFF, 0x80000000)
	assertBinaryOp("shl", 1, 0x7fffffff, 0x80000000)

	assertBinaryOp("shr_s", 1, 1, 0)
	assertBinaryOp("shr_s", 1, 0, 1)
	assertBinaryOp("shr_s", 0xFFFFFFFF, 1, 0xFFFFFFFF)
	assertBinaryOp("shr_s", 0x7fffffff, 1, 0x3fffffff)
	assertBinaryOp("shr_s", 0x80000000, 1, 0xc0000000)
	assertBinaryOp("shr_s", 0x40000000, 1, 0x20000000)
	assertBinaryOp("shr_s", 1, 32, 1)
	assertBinaryOp("shr_s", 1, 33, 0)
	assertBinaryOp("shr_s", 1, 0xFFFFFFFF, 0)
	assertBinaryOp("shr_s", 1, 0x7fffffff, 0)
	assertBinaryOp("shr_s", 1, 0x80000000, 1)
	assertBinaryOp("shr_s", 0x80000000, 31, 0xFFFFFFFF)
	assertBinaryOp("shr_s", 0xFFFFFFFF, 32, 0xFFFFFFFF)
	assertBinaryOp("shr_s", 0xFFFFFFFF, 33, 0xFFFFFFFF)
	assertBinaryOp("shr_s", 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF)
	assertBinaryOp("shr_s", 0xFFFFFFFF, 0x7fffffff, 0xFFFFFFFF)
	assertBinaryOp("shr_s", 0xFFFFFFFF, 0x80000000, 0xFFFFFFFF)

	assertBinaryOp("shr_u", 1, 1, 0)
	assertBinaryOp("shr_u", 1, 0, 1)
	assertBinaryOp("shr_u", 0xFFFFFFFF, 1, 0x7fffffff)
	assertBinaryOp("shr_u", 0x7fffffff, 1, 0x3fffffff)
	assertBinaryOp("shr_u", 0x80000000, 1, 0x40000000)
	assertBinaryOp("shr_u", 0x40000000, 1, 0x20000000)
	assertBinaryOp("shr_u", 1, 32, 1)
	assertBinaryOp("shr_u", 1, 33, 0)
	assertBinaryOp("shr_u", 1, 0xFFFFFFFF, 0)
	assertBinaryOp("shr_u", 1, 0x7fffffff, 0)
	assertBinaryOp("shr_u", 1, 0x80000000, 1)
	assertBinaryOp("shr_u", 0x80000000, 31, 1)
	assertBinaryOp("shr_u", 0xFFFFFFFF, 32, 0xFFFFFFFF)
	assertBinaryOp("shr_u", 0xFFFFFFFF, 33, 0x7fffffff)
	assertBinaryOp("shr_u", 0xFFFFFFFF, 0xFFFFFFFF, 1)
	assertBinaryOp("shr_u", 0xFFFFFFFF, 0x7fffffff, 1)
	assertBinaryOp("shr_u", 0xFFFFFFFF, 0x80000000, 0xFFFFFFFF)

	assertBinaryOp("rotl", 1, 1, 2)
	assertBinaryOp("rotl", 1, 0, 1)
	assertBinaryOp("rotl", 0xFFFFFFFF, 1, 0xFFFFFFFF)
	assertBinaryOp("rotl", 1, 32, 1)
	assertBinaryOp("rotl", 0xabcd9876, 1, 0x579b30ed)
	assertBinaryOp("rotl", 0xfe00dc00, 4, 0xe00dc00f)
	assertBinaryOp("rotl", 0xb0c1d2e3, 5, 0x183a5c76)
	assertBinaryOp("rotl", 0x00008000, 37, 0x00100000)
	assertBinaryOp("rotl", 0xb0c1d2e3, 0xff05, 0x183a5c76)
	assertBinaryOp("rotl", 0x769abcdf, 0xffffffed, 0x579beed3)
	assertBinaryOp("rotl", 0x769abcdf, 0x8000000d, 0x579beed3)
	assertBinaryOp("rotl", 1, 31, 0x80000000)
	assertBinaryOp("rotl", 0x80000000, 1, 1)

	assertBinaryOp("rotr", 1, 1, 0x80000000)
	assertBinaryOp("rotr", 1, 0, 1)
	assertBinaryOp("rotr", 0xFFFFFFFF, 1, 0xFFFFFFFF)
	assertBinaryOp("rotr", 1, 32, 1)
	assertBinaryOp("rotr", 0xff00cc00, 1, 0x7f806600)
	assertBinaryOp("rotr", 0x00080000, 4, 0x00008000)
	assertBinaryOp("rotr", 0xb0c1d2e3, 5, 0x1d860e97)
	assertBinaryOp("rotr", 0x00008000, 37, 0x00000400)
	assertBinaryOp("rotr", 0xb0c1d2e3, 0xff05, 0x1d860e97)
	assertBinaryOp("rotr", 0x769abcdf, 0xffffffed, 0xe6fbb4d5)
	assertBinaryOp("rotr", 0x769abcdf, 0x8000000d, 0xe6fbb4d5)
	assertBinaryOp("rotr", 1, 31, 2)
	assertBinaryOp("rotr", 0x80000000, 31, 1)

	assertUnaryOp("clz", 0xffffffff, 0)
	assertUnaryOp("clz", 0, 32)
	assertUnaryOp("clz", 0x00008000, 16)
	assertUnaryOp("clz", 0xff, 24)
	assertUnaryOp("clz", 0x80000000, 0)
	assertUnaryOp("clz", 1, 31)
	assertUnaryOp("clz", 2, 30)
	assertUnaryOp("clz", 0x7fffffff, 1)

	assertUnaryOp("ctz", 0xFFFFFFFF, 0)
	assertUnaryOp("ctz", 0, 32)
	assertUnaryOp("ctz", 0x00008000, 15)
	assertUnaryOp("ctz", 0x00010000, 16)
	assertUnaryOp("ctz", 0x80000000, 31)
	assertUnaryOp("ctz", 0x7fffffff, 0)

	assertUnaryOp("popcnt", 0xFFFFFFFF, 32)
	assertUnaryOp("popcnt", 0, 0)
	assertUnaryOp("popcnt", 0x00008000, 1)
	assertUnaryOp("popcnt", 0x80008000, 2)
	assertUnaryOp("popcnt", 0x7fffffff, 31)
	assertUnaryOp("popcnt", 0xAAAAAAAA, 16)
	assertUnaryOp("popcnt", 0x55555555, 16)
	assertUnaryOp("popcnt", 0xDEADBEEF, 24)

	// FIXME: add support extend instructions introduced in 1.1
	// https://github.com/WebAssembly/spec/blob/master/proposals/sign-extension-ops/Overview.md
	// assertUnaryOp("extend8_s", 0, 0)
	// assertUnaryOp("extend8_s", 0x7f, 127)
	// assertUnaryOp("extend8_s", 0x80, 0xFFFFFF80)
	// assertUnaryOp("extend8_s", 0xff, 0xFFFFFFFF)
	// assertUnaryOp("extend8_s", 0x012345_00, 0)
	// assertUnaryOp("extend8_s", 0xfedcba_80, 0xFFFFFF80)
	// assertUnaryOp("extend8_s", 0xFFFFFFFF, 0xFFFFFFFF)

	// assertUnaryOp("extend16_s", 0, 0)
	// assertUnaryOp("extend16_s", 0x7fff, 32767)
	// assertUnaryOp("extend16_s", 0x8000, 0xFFFF8000)
	// assertUnaryOp("extend16_s", 0xffff, 0xFFFFFFFF)
	// assertUnaryOp("extend16_s", 0x0123_0000, 0)
	// assertUnaryOp("extend16_s", 0xfedc_8000, 0xFFFF8000)
	// assertUnaryOp("extend16_s", 0xFFFFFFFF, 0xFFFFFFFF)

	assertUnaryOp("eqz", 0, 1)
	assertUnaryOp("eqz", 1, 0)
	assertUnaryOp("eqz", 0x80000000, 0)
	assertUnaryOp("eqz", 0x7fffffff, 0)
	assertUnaryOp("eqz", 0xffffffff, 0)

	assertBinaryOp("eq", 0, 0, 1)
	assertBinaryOp("eq", 1, 1, 1)
	assertBinaryOp("eq", 0xFFFFFFFF, 1, 0)
	assertBinaryOp("eq", 0x80000000, 0x80000000, 1)
	assertBinaryOp("eq", 0x7fffffff, 0x7fffffff, 1)
	assertBinaryOp("eq", 0xFFFFFFFF, 0xFFFFFFFF, 1)
	assertBinaryOp("eq", 1, 0, 0)
	assertBinaryOp("eq", 0, 1, 0)
	assertBinaryOp("eq", 0x80000000, 0, 0)
	assertBinaryOp("eq", 0, 0x80000000, 0)
	assertBinaryOp("eq", 0x80000000, 0xFFFFFFFF, 0)
	assertBinaryOp("eq", 0xFFFFFFFF, 0x80000000, 0)
	assertBinaryOp("eq", 0x80000000, 0x7fffffff, 0)
	assertBinaryOp("eq", 0x7fffffff, 0x80000000, 0)

	assertBinaryOp("ne", 0, 0, 0)
	assertBinaryOp("ne", 1, 1, 0)
	assertBinaryOp("ne", 0xFFFFFFFF, 1, 1)
	assertBinaryOp("ne", 0x80000000, 0x80000000, 0)
	assertBinaryOp("ne", 0x7fffffff, 0x7fffffff, 0)
	assertBinaryOp("ne", 0xFFFFFFFF, 0xFFFFFFFF, 0)
	assertBinaryOp("ne", 1, 0, 1)
	assertBinaryOp("ne", 0, 1, 1)
	assertBinaryOp("ne", 0x80000000, 0, 1)
	assertBinaryOp("ne", 0, 0x80000000, 1)
	assertBinaryOp("ne", 0x80000000, 0xFFFFFFFF, 1)
	assertBinaryOp("ne", 0xFFFFFFFF, 0x80000000, 1)
	assertBinaryOp("ne", 0x80000000, 0x7fffffff, 1)
	assertBinaryOp("ne", 0x7fffffff, 0x80000000, 1)

	assertBinaryOp("lt_s", 0, 0, 0)
	assertBinaryOp("lt_s", 1, 1, 0)
	assertBinaryOp("lt_s", 0xFFFFFFFF, 1, 1)
	assertBinaryOp("lt_s", 0x80000000, 0x80000000, 0)
	assertBinaryOp("lt_s", 0x7fffffff, 0x7fffffff, 0)
	assertBinaryOp("lt_s", 0xFFFFFFFF, 0xFFFFFFFF, 0)
	assertBinaryOp("lt_s", 1, 0, 0)
	assertBinaryOp("lt_s", 0, 1, 1)
	assertBinaryOp("lt_s", 0x80000000, 0, 1)
	assertBinaryOp("lt_s", 0, 0x80000000, 0)
	assertBinaryOp("lt_s", 0x80000000, 0xFFFFFFFF, 1)
	assertBinaryOp("lt_s", 0xFFFFFFFF, 0x80000000, 0)
	assertBinaryOp("lt_s", 0x80000000, 0x7fffffff, 1)
	assertBinaryOp("lt_s", 0x7fffffff, 0x80000000, 0)

	assertBinaryOp("lt_u", 0, 0, 0)
	assertBinaryOp("lt_u", 1, 1, 0)
	assertBinaryOp("lt_u", 0xFFFFFFFF, 1, 0)
	assertBinaryOp("lt_u", 0x80000000, 0x80000000, 0)
	assertBinaryOp("lt_u", 0x7fffffff, 0x7fffffff, 0)
	assertBinaryOp("lt_u", 0xFFFFFFFF, 0xFFFFFFFF, 0)
	assertBinaryOp("lt_u", 1, 0, 0)
	assertBinaryOp("lt_u", 0, 1, 1)
	assertBinaryOp("lt_u", 0x80000000, 0, 0)
	assertBinaryOp("lt_u", 0, 0x80000000, 1)
	assertBinaryOp("lt_u", 0x80000000, 0xFFFFFFFF, 1)
	assertBinaryOp("lt_u", 0xFFFFFFFF, 0x80000000, 0)
	assertBinaryOp("lt_u", 0x80000000, 0x7fffffff, 0)
	assertBinaryOp("lt_u", 0x7fffffff, 0x80000000, 1)

	assertBinaryOp("le_s", 0, 0, 1)
	assertBinaryOp("le_s", 1, 1, 1)
	assertBinaryOp("le_s", 0xFFFFFFFF, 1, 1)
	assertBinaryOp("le_s", 0x80000000, 0x80000000, 1)
	assertBinaryOp("le_s", 0x7fffffff, 0x7fffffff, 1)
	assertBinaryOp("le_s", 0xFFFFFFFF, 0xFFFFFFFF, 1)
	assertBinaryOp("le_s", 1, 0, 0)
	assertBinaryOp("le_s", 0, 1, 1)
	assertBinaryOp("le_s", 0x80000000, 0, 1)
	assertBinaryOp("le_s", 0, 0x80000000, 0)
	assertBinaryOp("le_s", 0x80000000, 0xFFFFFFFF, 1)
	assertBinaryOp("le_s", 0xFFFFFFFF, 0x80000000, 0)
	assertBinaryOp("le_s", 0x80000000, 0x7fffffff, 1)
	assertBinaryOp("le_s", 0x7fffffff, 0x80000000, 0)

	assertBinaryOp("le_u", 0, 0, 1)
	assertBinaryOp("le_u", 1, 1, 1)
	assertBinaryOp("le_u", 0xFFFFFFFF, 1, 0)
	assertBinaryOp("le_u", 0x80000000, 0x80000000, 1)
	assertBinaryOp("le_u", 0x7fffffff, 0x7fffffff, 1)
	assertBinaryOp("le_u", 0xFFFFFFFF, 0xFFFFFFFF, 1)
	assertBinaryOp("le_u", 1, 0, 0)
	assertBinaryOp("le_u", 0, 1, 1)
	assertBinaryOp("le_u", 0x80000000, 0, 0)
	assertBinaryOp("le_u", 0, 0x80000000, 1)
	assertBinaryOp("le_u", 0x80000000, 0xFFFFFFFF, 1)
	assertBinaryOp("le_u", 0xFFFFFFFF, 0x80000000, 0)
	assertBinaryOp("le_u", 0x80000000, 0x7fffffff, 0)
	assertBinaryOp("le_u", 0x7fffffff, 0x80000000, 1)

	assertBinaryOp("gt_s", 0, 0, 0)
	assertBinaryOp("gt_s", 1, 1, 0)
	assertBinaryOp("gt_s", 0xFFFFFFFF, 1, 0)
	assertBinaryOp("gt_s", 0x80000000, 0x80000000, 0)
	assertBinaryOp("gt_s", 0x7fffffff, 0x7fffffff, 0)
	assertBinaryOp("gt_s", 0xFFFFFFFF, 0xFFFFFFFF, 0)
	assertBinaryOp("gt_s", 1, 0, 1)
	assertBinaryOp("gt_s", 0, 1, 0)
	assertBinaryOp("gt_s", 0x80000000, 0, 0)
	assertBinaryOp("gt_s", 0, 0x80000000, 1)
	assertBinaryOp("gt_s", 0x80000000, 0xFFFFFFFF, 0)
	assertBinaryOp("gt_s", 0xFFFFFFFF, 0x80000000, 1)
	assertBinaryOp("gt_s", 0x80000000, 0x7fffffff, 0)
	assertBinaryOp("gt_s", 0x7fffffff, 0x80000000, 1)

	assertBinaryOp("gt_u", 0, 0, 0)
	assertBinaryOp("gt_u", 1, 1, 0)
	assertBinaryOp("gt_u", 0xFFFFFFFF, 1, 1)
	assertBinaryOp("gt_u", 0x80000000, 0x80000000, 0)
	assertBinaryOp("gt_u", 0x7fffffff, 0x7fffffff, 0)
	assertBinaryOp("gt_u", 0xFFFFFFFF, 0xFFFFFFFF, 0)
	assertBinaryOp("gt_u", 1, 0, 1)
	assertBinaryOp("gt_u", 0, 1, 0)
	assertBinaryOp("gt_u", 0x80000000, 0, 1)
	assertBinaryOp("gt_u", 0, 0x80000000, 0)
	assertBinaryOp("gt_u", 0x80000000, 0xFFFFFFFF, 0)
	assertBinaryOp("gt_u", 0xFFFFFFFF, 0x80000000, 1)
	assertBinaryOp("gt_u", 0x80000000, 0x7fffffff, 1)
	assertBinaryOp("gt_u", 0x7fffffff, 0x80000000, 0)

	assertBinaryOp("ge_s", 0, 0, 1)
	assertBinaryOp("ge_s", 1, 1, 1)
	assertBinaryOp("ge_s", 0xFFFFFFFF, 1, 0)
	assertBinaryOp("ge_s", 0x80000000, 0x80000000, 1)
	assertBinaryOp("ge_s", 0x7fffffff, 0x7fffffff, 1)
	assertBinaryOp("ge_s", 0xFFFFFFFF, 0xFFFFFFFF, 1)
	assertBinaryOp("ge_s", 1, 0, 1)
	assertBinaryOp("ge_s", 0, 1, 0)
	assertBinaryOp("ge_s", 0x80000000, 0, 0)
	assertBinaryOp("ge_s", 0, 0x80000000, 1)
	assertBinaryOp("ge_s", 0x80000000, 0xFFFFFFFF, 0)
	assertBinaryOp("ge_s", 0xFFFFFFFF, 0x80000000, 1)
	assertBinaryOp("ge_s", 0x80000000, 0x7fffffff, 0)
	assertBinaryOp("ge_s", 0x7fffffff, 0x80000000, 1)

	assertBinaryOp("ge_u", 0, 0, 1)
	assertBinaryOp("ge_u", 1, 1, 1)
	assertBinaryOp("ge_u", 0xFFFFFFFF, 1, 1)
	assertBinaryOp("ge_u", 0x80000000, 0x80000000, 1)
	assertBinaryOp("ge_u", 0x7fffffff, 0x7fffffff, 1)
	assertBinaryOp("ge_u", 0xFFFFFFFF, 0xFFFFFFFF, 1)
	assertBinaryOp("ge_u", 1, 0, 1)
	assertBinaryOp("ge_u", 0, 1, 0)
	assertBinaryOp("ge_u", 0x80000000, 0, 1)
	assertBinaryOp("ge_u", 0, 0x80000000, 0)
	assertBinaryOp("ge_u", 0x80000000, 0xFFFFFFFF, 0)
	assertBinaryOp("ge_u", 0xFFFFFFFF, 0x80000000, 1)
	assertBinaryOp("ge_u", 0x80000000, 0x7fffffff, 1)
	assertBinaryOp("ge_u", 0x7fffffff, 0x80000000, 0)
}
